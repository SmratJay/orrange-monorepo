# ===============================================
# DOCKER COMPOSE - PRODUCTION DEPLOYMENT
# ===============================================

version: '3.8'

services:
  # ===============================================
  # POSTGRESQL DATABASE
  # ===============================================
  postgres:
    image: postgres:15-alpine
    container_name: orrange-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-orrange}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - orrange-network

  # ===============================================
  # REDIS CACHE
  # ===============================================
  redis:
    image: redis:7-alpine
    container_name: orrange-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - orrange-network

  # ===============================================
  # API SERVICE
  # ===============================================
  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    container_name: orrange-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-orrange}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ESCROW_CONTRACT_ADDRESS: ${ESCROW_CONTRACT_ADDRESS}
      BLOCKCHAIN_RPC_URL: ${BLOCKCHAIN_RPC_URL}
      CHAIN_ID: ${CHAIN_ID:-11155111}
      ADMIN_PRIVATE_KEY: ${ADMIN_PRIVATE_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
      PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - orrange-network
    volumes:
      - api_logs:/app/logs

  # ===============================================
  # WEB APPLICATION
  # ===============================================
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: orrange-web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8080}
      NEXT_PUBLIC_CHAIN_ID: ${CHAIN_ID:-11155111}
      NEXT_PUBLIC_CONTRACT_ADDRESS: ${ESCROW_CONTRACT_ADDRESS}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - orrange-network

  # ===============================================
  # NGINX REVERSE PROXY
  # ===============================================
  nginx:
    image: nginx:alpine
    container_name: orrange-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - web_static:/var/www/static:ro
    depends_on:
      - api
      - web
    restart: unless-stopped
    networks:
      - orrange-network

  # ===============================================
  # MONITORING - PROMETHEUS
  # ===============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: orrange-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - orrange-network

  # ===============================================
  # MONITORING - GRAFANA
  # ===============================================
  grafana:
    image: grafana/grafana:latest
    container_name: orrange-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_ADMIN_USER: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - orrange-network

# ===============================================
# VOLUMES
# ===============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  web_static:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ===============================================
# NETWORKS
# ===============================================
networks:
  orrange-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
