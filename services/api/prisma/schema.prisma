// Orrange P2P - Clean Decentralized P2P Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User model for P2P platform
model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique @map("wallet_address")
  email         String?  @unique
  username      String?  @unique
  
  // Profile Information
  firstName       String?   @map("first_name")
  lastName        String?   @map("last_name")
  profilePicture  String?   @map("profile_picture")
  bio             String?
  phoneNumber     String?   @map("phone_number")
  country         String?
  timezone        String?
  preferredLanguage String? @default("en") @map("preferred_language")
  
  // Trust & Reputation
  reputationScore Float   @default(0.0) @map("reputation_score")
  tradeCount      Int     @default(0) @map("trade_count")
  disputeRatio    Float   @default(0.0) @map("dispute_ratio")
  
  // P2P Trading Stats
  completedTrades     Int          @default(0) @map("completed_trades")
  trustScore          Decimal      @default(0) @map("trust_score")
  positiveRating      Int          @default(0) @map("positive_rating")
  negativeRating      Int          @default(0) @map("negative_rating")
  avgResponseTime     Int?         @map("avg_response_time") // in minutes
  
  // Authentication & Authorization
  role            UserRole  @default(USER)
  isVerified      Boolean   @default(false) @map("is_verified")
  
  // KYC & Security
  kycStatus       KycStatus @default(UNVERIFIED) @map("kyc_status")
  riskLevel       RiskLevel @default(LOW) @map("risk_level")
  isActive        Boolean   @default(true) @map("is_active")
  
  // P2P Settings
  isP2PEnabled        Boolean      @default(true) @map("is_p2p_enabled")
  p2pNickname         String?      @unique @map("p2p_nickname")
  requiresKYCForTrade Boolean      @default(false) @map("requires_kyc_for_trade")
  
  // Enhanced Security Fields
  riskScore       Int       @default(0) @map("risk_score") // 0-100 scale
  securityFlags   String[]  @default([]) @map("security_flags")
  lastRiskUpdate  DateTime? @map("last_risk_update")
  totalVolume     String    @default("0") @map("total_volume")
  maxDailyLimit   String    @default("100000") @map("max_daily_limit")
  isBlacklisted   Boolean   @default(false) @map("is_blacklisted")
  blacklistReason String?   @map("blacklist_reason")
  
  // Two-Factor Authentication
  twoFactorEnabled    Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret     String?   @map("two_factor_secret")
  backupCodes         String[]  @default([]) @map("backup_codes")
  lastLoginAt         DateTime? @map("last_login_at")
  failedLoginAttempts Int       @default(0) @map("failed_login_attempts")
  lockedUntil         DateTime? @map("locked_until")
  
  // Status & Activity
  isOnline        Boolean      @default(false) @map("is_online")
  lastSeenAt      DateTime?    @map("last_seen_at")
  
  // Soft Delete - CRITICAL for audit trail
  deletedAt       DateTime?    @map("deleted_at")
  
  // Metadata
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  
  // P2P Relations with SAFE delete constraints
  p2pAds              P2PAd[]
  p2pSellerTrades     P2PTrade[]   @relation("P2PTradeSeller")
  p2pBuyerTrades      P2PTrade[]   @relation("P2PTradeBuyer")
  p2pChats            P2PChat[]
  p2pInitiatedDisputes P2PDispute[] @relation("P2PDisputeInitiator")
  p2pAssignedDisputes P2PDispute[]  @relation("P2PDisputeArbitrator")
  p2pPaymentMethods   P2PPaymentMethod[]
  priceAlerts         PriceAlert[]
  
  // Trading Engine Relations
  tradingOrders       TradingOrder[]
  tradingBots         TradingBot[]
  positions           Position[]
  riskProfile         RiskProfile?
  buyTrades           Trade[]      @relation("UserBuyTrades")
  sellTrades          Trade[]      @relation("UserSellTrades")
  
  @@index([email])
  @@index([walletAddress])
  @@index([p2pNickname])
  @@index([trustScore])
  @@index([isP2PEnabled])
  @@index([country])
  @@index([role]) // CRITICAL for admin queries
  @@index([deletedAt]) // CRITICAL for soft delete queries
  @@index([createdAt])
  @@index([lastActivity])
  @@map("users")
}

// P2P Advertisement model - Users create buy/sell ads
model P2PAd {
  id              String        @id @default(cuid())
  userId          String        @map("user_id")
  
  // Ad Type & Details
  type            P2PAdType     // BUY or SELL
  cryptoAsset     String        @map("crypto_asset") // BTC, ETH, USDT
  fiatCurrency    String        @map("fiat_currency") // USD, EUR, INR
  
  // Pricing & Amounts
  amount          Decimal       // Crypto amount available
  minLimit        Decimal       @map("min_limit") // Min fiat amount
  maxLimit        Decimal       @map("max_limit") // Max fiat amount
  
  // Pricing Strategy
  pricingType     PricingType   @map("pricing_type") // FIXED, MARKET_PREMIUM
  fixedPrice      Decimal?      @map("fixed_price") // For fixed pricing
  marketPremium   Decimal?      @map("market_premium") // Premium/discount %
  
  // Payment Methods
  paymentMethods  String[]      @map("payment_methods") // ["BANK_TRANSFER", "PAYPAL"]
  
  // Terms & Conditions
  terms           String?       // Additional terms from advertiser
  autoReply       String?       @map("auto_reply") // Automatic response message
  
  // Geographical & Time Constraints
  allowedCountries String[]     @map("allowed_countries") // ["US", "UK", "DE"]
  timeZone        String?       @map("time_zone")
  tradingHours    String?       @map("trading_hours") // "09:00-18:00"
  
  // Status & Settings
  status          P2PAdStatus   @default(ACTIVE)
  isVisible       Boolean       @default(true) @map("is_visible")
  requiresKYC     Boolean       @default(false) @map("requires_kyc")
  minReputation   Int           @default(0) @map("min_reputation")
  
  // Metadata
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  lastActiveAt    DateTime      @default(now()) @map("last_active_at")
  
  // Relations
  user            User          @relation(fields: [userId], references: [id])
  trades          P2PTrade[]
  
  @@index([type, cryptoAsset, fiatCurrency])
  @@index([userId, status])
  @@index([status, isVisible])
  @@index([cryptoAsset, fiatCurrency, type])
  @@map("p2p_ads")
}

// P2P Trade model - Actual trades between users
model P2PTrade {
  id              String        @id @default(cuid())
  adId            String        @map("ad_id")
  
  // Trade Participants
  sellerId        String        @map("seller_id") // User selling crypto
  buyerId         String        @map("buyer_id")  // User buying crypto
  
  // Trade Details
  cryptoAsset     String        @map("crypto_asset")
  fiatCurrency    String        @map("fiat_currency")
  cryptoAmount    Decimal       @map("crypto_amount")
  fiatAmount      Decimal       @map("fiat_amount")
  exchangeRate    Decimal       @map("exchange_rate") // Rate at time of trade
  
  // Payment Information (Security: No sensitive data stored)
  paymentMethod   String        @map("payment_method")
  // NOTE: paymentDetails removed for security - exchanged via encrypted chat only
  
  // Trade Timeline
  status          P2PTradeStatus @default(PENDING)
  paymentWindow   Int           @default(30) @map("payment_window") // Minutes
  
  // Important Timestamps
  createdAt       DateTime      @default(now()) @map("created_at")
  acceptedAt      DateTime?     @map("accepted_at")
  paymentSentAt   DateTime?     @map("payment_sent_at")
  paymentConfirmedAt DateTime?  @map("payment_confirmed_at")
  completedAt     DateTime?     @map("completed_at")
  cancelledAt     DateTime?     @map("cancelled_at")
  disputedAt      DateTime?     @map("disputed_at")
  expiresAt       DateTime      @map("expires_at") // Auto-cancel time
  
  // Relations with SAFE delete policies
  ad              P2PAd         @relation(fields: [adId], references: [id], onDelete: Restrict)
  seller          User          @relation("P2PTradeSeller", fields: [sellerId], references: [id], onDelete: Restrict)
  buyer           User          @relation("P2PTradeBuyer", fields: [buyerId], references: [id], onDelete: Restrict)
  escrow          P2PEscrow?
  chats           P2PChat[]
  disputes        P2PDispute[]
  
  @@index([status]) // CRITICAL for performance
  @@index([sellerId])
  @@index([buyerId])
  @@index([adId])
  @@index([createdAt])
  @@index([cryptoAsset, fiatCurrency]) // CRITICAL for trading pair queries
  @@index([paymentMethod])
  @@map("p2p_trades")
}

// P2P Escrow model - Smart contract escrow for P2P trades
model P2PEscrow {
  id                    String          @id @default(cuid())
  tradeId               String          @unique @map("trade_id")
  
  // Escrow Details
  contractAddress       String          @map("contract_address")
  cryptoAsset          String          @map("crypto_asset")
  amount               Decimal
  
  // Blockchain Information
  chainId              Int             @map("chain_id")
  createTxHash         String?         @map("create_tx_hash")
  fundTxHash           String?         @map("fund_tx_hash")
  releaseTxHash        String?         @map("release_tx_hash")
  refundTxHash         String?         @map("refund_tx_hash")
  
  // Status & Timeline
  status               P2PEscrowStatus @default(CREATED)
  createdAt           DateTime        @default(now()) @map("created_at")
  fundedAt            DateTime?       @map("funded_at")
  releasedAt          DateTime?       @map("released_at")
  refundedAt          DateTime?       @map("refunded_at")
  
  // Security Features
  requiresArbitration Boolean         @default(false) @map("requires_arbitration")
  arbitrationDeadline DateTime?       @map("arbitration_deadline")
  
  // Relations
  trade               P2PTrade        @relation(fields: [tradeId], references: [id])
  
  @@map("p2p_escrows")
}

// P2P Chat model - Secure communication between traders
model P2PChat {
  id              String        @id @default(cuid())
  tradeId         String        @map("trade_id")
  senderId        String        @map("sender_id")
  
  // Message Content
  messageType     ChatMessageType @default(TEXT) @map("message_type")
  content         String        // Encrypted message content
  originalContent String?       @map("original_content") // For system messages
  
  // File Attachments
  attachments     Json?         // Array of file metadata
  fileHash        String?       @map("file_hash") // IPFS hash for files
  
  // Message Metadata
  isSystemMessage Boolean       @default(false) @map("is_system_message")
  readAt          DateTime?     @map("read_at")
  
  // Timestamps
  createdAt       DateTime      @default(now()) @map("created_at")
  
  // Relations
  trade           P2PTrade      @relation(fields: [tradeId], references: [id])
  sender          User          @relation(fields: [senderId], references: [id])
  
  @@index([tradeId, createdAt])
  @@index([senderId])
  @@map("p2p_chats")
}

// P2P Dispute model - Dispute resolution for P2P trades
model P2PDispute {
  id              String          @id @default(cuid())
  tradeId         String          @map("trade_id")
  initiatedBy     String          @map("initiated_by")
  
  // Dispute Details
  reason          P2PDisputeReason
  description     String
  evidence        Json[]          @default([]) // Evidence files and descriptions
  
  // Resolution Process
  status          P2PDisputeStatus @default(PENDING)
  assignedTo      String?         @map("assigned_to") // Arbitrator user ID
  
  // Resolution Details
  resolution      String?         // Final resolution description
  resolutionType  String?         @map("resolution_type") // BUYER_FAVOR, SELLER_FAVOR, SPLIT
  compensationAmount Decimal?     @map("compensation_amount")
  
  // Timeline
  createdAt       DateTime        @default(now()) @map("created_at")
  resolvedAt      DateTime?       @map("resolved_at")
  
  // Relations
  trade           P2PTrade        @relation(fields: [tradeId], references: [id])
  initiator       User            @relation("P2PDisputeInitiator", fields: [initiatedBy], references: [id])
  arbitrator      User?           @relation("P2PDisputeArbitrator", fields: [assignedTo], references: [id])
  
  @@index([status])
  @@index([tradeId])
  @@index([initiatedBy])
  @@map("p2p_disputes")
}

// P2P Payment Method Reference model - Secure payment method references only
model P2PPaymentMethod {
  id              String        @id @default(cuid())
  userId          String        @map("user_id")
  
  // Payment Method Metadata Only (No Sensitive Details)
  type            String        // BANK_TRANSFER, PAYPAL, UPI, etc.
  name            String        // User-friendly name (e.g., "My Bank Account")
  displayName     String        @map("display_name") // Safe display (e.g., "****1234")
  
  // Geographical & Currency Support
  supportedCountries String[]   @map("supported_countries")
  supportedCurrencies String[]  @map("supported_currencies")
  
  // Settings (No actual payment details stored)
  isActive        Boolean       @default(true) @map("is_active")
  isVerified      Boolean       @default(false) @map("is_verified")
  // NOTE: All sensitive payment details exchanged via encrypted P2P chat only
  
  // Metadata
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  lastUsedAt      DateTime?     @map("last_used_at")
  
  // Soft Delete Pattern - NEVER hard delete user data
  deletedAt       DateTime? @map("deleted_at")
  
  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Restrict)
  
  @@index([userId])
  @@index([type])
  @@index([isActive])
  @@index([deletedAt]) // Index for soft delete queries
  @@map("p2p_payment_methods")
}

// Price Alert model - Real-time price notifications
model PriceAlert {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  
  // Alert Configuration
  symbol      String    // BTC, ETH, etc.
  condition   String    // ABOVE, BELOW, CHANGE
  targetPrice Decimal   @map("target_price")
  
  // Status
  isActive    Boolean   @default(true) @map("is_active")
  triggered   Boolean   @default(false)
  triggerredAt DateTime? @map("triggered_at")
  
  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([symbol])
  @@index([isActive])
  @@map("price_alerts")
}

// P2P Trading Enums
enum P2PAdType {
  BUY
  SELL
}

enum PricingType {
  FIXED
  MARKET_PREMIUM
  MARKET_DISCOUNT
}

enum P2PAdStatus {
  ACTIVE
  PAUSED
  INACTIVE
  SUSPENDED
  DELETED
}

enum P2PTradeStatus {
  PENDING          // Trade created, waiting for seller to confirm
  ACCEPTED         // Seller accepted, escrow created
  ESCROW_FUNDED    // Crypto deposited to escrow
  PAYMENT_PENDING  // Waiting for fiat payment
  PAYMENT_SENT     // Buyer claims payment sent
  PAYMENT_CONFIRMED // Seller confirms payment received
  COMPLETED        // Trade completed, crypto released
  CANCELLED        // Trade cancelled
  DISPUTED         // Trade in dispute
  EXPIRED          // Trade expired without completion
}

enum P2PEscrowStatus {
  CREATED
  FUNDED
  RELEASED
  REFUNDED
  DISPUTED
}

enum ChatMessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  PAYMENT_PROOF
}

enum P2PDisputeReason {
  PAYMENT_NOT_RECEIVED
  PAYMENT_NOT_SENT
  WRONG_AMOUNT
  FAKE_PAYMENT_PROOF
  SELLER_UNRESPONSIVE
  BUYER_UNRESPONSIVE
  TERMS_VIOLATION
  FRAUD_SUSPECTED
  TECHNICAL_ISSUE
  OTHER
}

enum P2PDisputeStatus {
  PENDING
  UNDER_REVIEW
  AWAITING_EVIDENCE
  ARBITRATOR_ASSIGNED
  RESOLVED
  CLOSED
  APPEALED
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  ARBITRATOR
}

enum KycStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  EXTREME
  BLACKLISTED
}

// Trading Engine Enums
enum OrderType {
  MARKET
  LIMIT
  STOP_LOSS
  TAKE_PROFIT
  STOP_LIMIT
}

enum OrderSide {
  BUY
  SELL
}

enum TimeInForce {
  GTC  // Good Till Canceled
  IOC  // Immediate Or Cancel
  FOK  // Fill Or Kill
  DAY  // Day Order
}

enum OrderStatus {
  PENDING
  OPEN
  PARTIALLY_FILLED
  FILLED
  CANCELLED
  REJECTED
  EXPIRED
}

enum BotStrategy {
  DCA           // Dollar Cost Averaging
  GRID          // Grid Trading
  ARBITRAGE
  REBALANCE
  MOMENTUM
  MEAN_REVERSION
}

// Advanced Trading Models

model TradingOrder {
  id                String      @id @default(cuid())
  userId            String      @map("user_id")
  symbol            String
  type              OrderType
  side              OrderSide
  quantity          Decimal     @db.Decimal(20, 8)
  price             Decimal?    @db.Decimal(20, 8) // Optional for market orders
  stopPrice         Decimal?    @db.Decimal(20, 8) @map("stop_price") // For stop orders
  timeInForce       TimeInForce @default(GTC) @map("time_in_force")
  status            OrderStatus @default(PENDING)
  fillPrice         Decimal?    @db.Decimal(20, 8) @map("fill_price")
  fillQuantity      Decimal     @default(0) @db.Decimal(20, 8) @map("fill_quantity")
  remainingQuantity Decimal     @db.Decimal(20, 8) @map("remaining_quantity")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  expiresAt         DateTime?   @map("expires_at")

  // Relations
  user              User        @relation(fields: [userId], references: [id])
  buyTrades         Trade[]     @relation("BuyTrades")
  sellTrades        Trade[]     @relation("SellTrades")

  @@map("trading_orders")
  @@index([userId])
  @@index([symbol])
  @@index([status])
  @@index([type])
  @@index([createdAt])
}

model Trade {
  id          String    @id @default(cuid())
  symbol      String
  buyOrderId  String    @map("buy_order_id")
  sellOrderId String    @map("sell_order_id")
  buyUserId   String    @map("buy_user_id")
  sellUserId  String    @map("sell_user_id")
  price       Decimal   @db.Decimal(20, 8)
  quantity    Decimal   @db.Decimal(20, 8)
  timestamp   DateTime  @default(now())

  // Relations
  buyOrder    TradingOrder @relation("BuyTrades", fields: [buyOrderId], references: [id])
  sellOrder   TradingOrder @relation("SellTrades", fields: [sellOrderId], references: [id])
  buyUser     User         @relation("UserBuyTrades", fields: [buyUserId], references: [id])
  sellUser    User         @relation("UserSellTrades", fields: [sellUserId], references: [id])

  @@map("trades")
  @@index([symbol])
  @@index([buyUserId])
  @@index([sellUserId])
  @@index([timestamp])
}

model TradingBot {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  name          String
  strategy      BotStrategy
  symbol        String
  isActive      Boolean     @default(false) @map("is_active")
  config        Json        // Flexible config storage
  performance   Json        // Performance metrics
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  user          User        @relation(fields: [userId], references: [id])

  @@map("trading_bots")
  @@index([userId])
  @@index([strategy])
  @@index([symbol])
  @@index([isActive])
}

model Position {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  symbol        String
  side          OrderSide
  quantity      Decimal   @db.Decimal(20, 8)
  averagePrice  Decimal   @db.Decimal(20, 8) @map("average_price")
  unrealizedPnL Decimal   @default(0) @db.Decimal(20, 8) @map("unrealized_pnl")
  realizedPnL   Decimal   @default(0) @db.Decimal(20, 8) @map("realized_pnl")
  marginUsed    Decimal   @default(0) @db.Decimal(20, 8) @map("margin_used")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  user          User      @relation(fields: [userId], references: [id])

  @@map("positions")
  @@index([userId])
  @@index([symbol])
  @@index([side])
}

model RiskProfile {
  id                  String    @id @default(cuid())
  userId              String    @unique @map("user_id")
  totalPortfolioValue Decimal   @default(0) @db.Decimal(20, 8) @map("total_portfolio_value")
  dailyPnL            Decimal   @default(0) @db.Decimal(20, 8) @map("daily_pnl")
  weeklyPnL           Decimal   @default(0) @db.Decimal(20, 8) @map("weekly_pnl")
  monthlyPnL          Decimal   @default(0) @db.Decimal(20, 8) @map("monthly_pnl")
  maxDrawdown         Decimal   @default(0) @db.Decimal(20, 8) @map("max_drawdown")
  riskScore           Int       @default(0) @map("risk_score") // 1-10 scale
  marginUsed          Decimal   @default(0) @db.Decimal(20, 8) @map("margin_used")
  marginAvailable     Decimal   @default(0) @db.Decimal(20, 8) @map("margin_available")
  maxPositionSize     Decimal?  @db.Decimal(20, 8) @map("max_position_size")
  dailyLossLimit      Decimal?  @db.Decimal(20, 8) @map("daily_loss_limit")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  user                User      @relation(fields: [userId], references: [id])

  @@map("risk_profiles")
}

model MarketData {
  id        String    @id @default(cuid())
  symbol    String
  price     Decimal   @db.Decimal(20, 8)
  volume    Decimal   @db.Decimal(20, 8)
  change24h Decimal   @db.Decimal(10, 4) @map("change_24h")
  high24h   Decimal   @db.Decimal(20, 8) @map("high_24h")
  low24h    Decimal   @db.Decimal(20, 8) @map("low_24h")
  timestamp DateTime  @default(now())

  @@map("market_data")
  @@index([symbol])
  @@index([timestamp])
}
